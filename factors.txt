Betting patterns
    cyclical / batch (i.e. football)
    trigger based (if a baseball game has odds greater than x)
    continuous / guaranteed
    ??


Parameters to tune:
    Maximum number of bets (if any) per batch (if football)
    % of balance per bet
    strategy



Each investor/bot has:
    a balance
    a sport
    a market (hth, total, spread)
    a maximum number or weekly bets (optional)
    an activation threshhold / trigger for a recovery strategy
        think if balance dips below $xx or if 5 games are lost in a row
    a strategy
        i.e. place a wager on the first 5 bets that meet x criteria
        i.e. after a loss, double the wager. repeat this up to 5 total times, after which point reset to base.
    a model
        a model that has access to historical data and statistics and even relevant news and information (injury reports, etc.) and predicts game outcomes
    a history log
    a list of open wagers
    a forecast (super cool, basically when trained on a similar odds & context game in the past, how accurate was this bot)

Each strategy has:
    a description
    more things... to fill out still


the app needs:
     - backend connection to a machine learning model that uses sports statistics, record information, and historical data alongside current contexts (weather, roster, injuries, home/away, etc) to predict the score and odds on games.
     - api connections to pull relevant news and sports updates to refresh the models
     - a models
     - a basic model
     - a basic strategy (randomly picks?)
     - a performance dashboard that has a heat matrix showing profitability, with the various axises represnting things like model & strategy parameter combinations
    this is such that, as I run various combinations through backtest simulations on historical data, I can both refine the models and figure out the optimum operation for maxmimum profitability
     - a simulation back testing lab, where there's control to modify various model parameters, train ML models, and change bot parameters

 
One example case for a minimum viable product would be a user managing investors(bots) by logging in weekly prior to college football games on the weekend. they would refresh the bets, update the models (yet to be implemented, but will likely need feeding live data like weather prediction for the games and injury reports), and access each bot to collect its reccommended investments (example: pick over 140+ in Pistons vs Pacers) that it recommends based on analyzing simulation results in account with its chosen "strategy" (for example +eV). the user would then confirm add each bots recommended investments to their bid cart, and then have the option for confirmation and to export as an excel ledger sheet organized sportsbook. This would allow a user to place their bets by manually logging into the sportsbooks of their choice. The system would then allow a user to modify placed bet odds incase the sportsbook offered a different odd than the bot provided, or reject/delete a confirmed investment as well. The system would then acces the web via an api to get the game results, and update the bets(investments) W/L and balances and profits accordingly.